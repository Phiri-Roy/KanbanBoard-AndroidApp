// Generated by view binder compiler. Do not edit!
package com.kanbanboard.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.RadioGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.radiobutton.MaterialRadioButton;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.kanbanboard.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogTaskBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton btnCancel;

  @NonNull
  public final MaterialButton btnSave;

  @NonNull
  public final TextInputEditText etDueDate;

  @NonNull
  public final TextInputEditText etTaskDescription;

  @NonNull
  public final TextInputEditText etTaskTitle;

  @NonNull
  public final MaterialRadioButton rbHigh;

  @NonNull
  public final MaterialRadioButton rbLow;

  @NonNull
  public final MaterialRadioButton rbMedium;

  @NonNull
  public final RadioGroup rgPriority;

  @NonNull
  public final AutoCompleteTextView spinnerStatus;

  @NonNull
  public final SwitchMaterial switchNotifications;

  @NonNull
  public final TextInputLayout tilDueDate;

  @NonNull
  public final TextInputLayout tilStatus;

  @NonNull
  public final TextInputLayout tilTaskDescription;

  @NonNull
  public final TextInputLayout tilTaskTitle;

  private DialogTaskBinding(@NonNull ScrollView rootView, @NonNull MaterialButton btnCancel,
      @NonNull MaterialButton btnSave, @NonNull TextInputEditText etDueDate,
      @NonNull TextInputEditText etTaskDescription, @NonNull TextInputEditText etTaskTitle,
      @NonNull MaterialRadioButton rbHigh, @NonNull MaterialRadioButton rbLow,
      @NonNull MaterialRadioButton rbMedium, @NonNull RadioGroup rgPriority,
      @NonNull AutoCompleteTextView spinnerStatus, @NonNull SwitchMaterial switchNotifications,
      @NonNull TextInputLayout tilDueDate, @NonNull TextInputLayout tilStatus,
      @NonNull TextInputLayout tilTaskDescription, @NonNull TextInputLayout tilTaskTitle) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnSave = btnSave;
    this.etDueDate = etDueDate;
    this.etTaskDescription = etTaskDescription;
    this.etTaskTitle = etTaskTitle;
    this.rbHigh = rbHigh;
    this.rbLow = rbLow;
    this.rbMedium = rbMedium;
    this.rgPriority = rgPriority;
    this.spinnerStatus = spinnerStatus;
    this.switchNotifications = switchNotifications;
    this.tilDueDate = tilDueDate;
    this.tilStatus = tilStatus;
    this.tilTaskDescription = tilTaskDescription;
    this.tilTaskTitle = tilTaskTitle;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCancel;
      MaterialButton btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btnSave;
      MaterialButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.etDueDate;
      TextInputEditText etDueDate = ViewBindings.findChildViewById(rootView, id);
      if (etDueDate == null) {
        break missingId;
      }

      id = R.id.etTaskDescription;
      TextInputEditText etTaskDescription = ViewBindings.findChildViewById(rootView, id);
      if (etTaskDescription == null) {
        break missingId;
      }

      id = R.id.etTaskTitle;
      TextInputEditText etTaskTitle = ViewBindings.findChildViewById(rootView, id);
      if (etTaskTitle == null) {
        break missingId;
      }

      id = R.id.rbHigh;
      MaterialRadioButton rbHigh = ViewBindings.findChildViewById(rootView, id);
      if (rbHigh == null) {
        break missingId;
      }

      id = R.id.rbLow;
      MaterialRadioButton rbLow = ViewBindings.findChildViewById(rootView, id);
      if (rbLow == null) {
        break missingId;
      }

      id = R.id.rbMedium;
      MaterialRadioButton rbMedium = ViewBindings.findChildViewById(rootView, id);
      if (rbMedium == null) {
        break missingId;
      }

      id = R.id.rgPriority;
      RadioGroup rgPriority = ViewBindings.findChildViewById(rootView, id);
      if (rgPriority == null) {
        break missingId;
      }

      id = R.id.spinnerStatus;
      AutoCompleteTextView spinnerStatus = ViewBindings.findChildViewById(rootView, id);
      if (spinnerStatus == null) {
        break missingId;
      }

      id = R.id.switchNotifications;
      SwitchMaterial switchNotifications = ViewBindings.findChildViewById(rootView, id);
      if (switchNotifications == null) {
        break missingId;
      }

      id = R.id.tilDueDate;
      TextInputLayout tilDueDate = ViewBindings.findChildViewById(rootView, id);
      if (tilDueDate == null) {
        break missingId;
      }

      id = R.id.tilStatus;
      TextInputLayout tilStatus = ViewBindings.findChildViewById(rootView, id);
      if (tilStatus == null) {
        break missingId;
      }

      id = R.id.tilTaskDescription;
      TextInputLayout tilTaskDescription = ViewBindings.findChildViewById(rootView, id);
      if (tilTaskDescription == null) {
        break missingId;
      }

      id = R.id.tilTaskTitle;
      TextInputLayout tilTaskTitle = ViewBindings.findChildViewById(rootView, id);
      if (tilTaskTitle == null) {
        break missingId;
      }

      return new DialogTaskBinding((ScrollView) rootView, btnCancel, btnSave, etDueDate,
          etTaskDescription, etTaskTitle, rbHigh, rbLow, rbMedium, rgPriority, spinnerStatus,
          switchNotifications, tilDueDate, tilStatus, tilTaskDescription, tilTaskTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
